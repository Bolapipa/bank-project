from datetime import datetime, date
import pytz

# Armazena todos os usu√°rios cadastrados
# Cada entrada √©:
# cpf (str) -> {
#     "senha": str,
#     "saldo": float,
#     "extrato": str,
#     "numero_saques": int,
#     "numero_transacoes_dia": int,
#     "data_contagem": date
# }
users = {}

# √çcones para interface
ICON_LOGIN = "üîë"
ICON_EXIT = "‚ùå"
ICON_SUCCESS = "‚úÖ"
ICON_ERROR = "‚ùå"
ICON_INFO = "‚ÑπÔ∏è"
ICON_CPF = "üë§"
ICON_KEY = "üîí"
ICON_DEPOSIT = "üí∞"
ICON_WITHDRAW = "üí∏"
ICON_PIX = "‚ö°"
ICON_MENU = "‚ú®"

# Fuso hor√°rio Brasil/S√£o Paulo
TZ = pytz.timezone("America/Sao_Paulo")


def mostrar_menu_transacoes():
    menu = f"""
{ICON_MENU}‚îÄ‚îÄ‚îÄ Opera√ß√µes Banc√°rias ‚îÄ‚îÄ‚îÄ{ICON_MENU}
{ICON_DEPOSIT} [d] Depositar
{ICON_WITHDRAW} [s] Saque
{ICON_PIX} [p] Pix
üìÑ [e] Extrato
üëÄ [v] Saldo
{ICON_EXIT} [q] Sair
üöÄ Escolha: """
    return input(menu)


def autenticar(usuario):
    senha = input(f"{ICON_KEY} Digite sua senha (4 d√≠gitos): ")
    if senha != users[usuario]["senha"]:
        print(f"{ICON_ERROR} Senha incorreta!")
        return False
    return True


def depositar(usuario, saldo, extrato):
    try:
        valor = float(input(f"{ICON_DEPOSIT} Informe o valor do dep√≥sito: R$ "))
    except ValueError:
        print(f"{ICON_ERROR} Valor inv√°lido.")
        return saldo, extrato

    # Autentica√ß√£o ap√≥s informar valor
    if not autenticar(usuario):
        print(f"{ICON_ERROR} Dep√≥sito cancelado.")
        return saldo, extrato

    if valor > 0:
        timestamp = datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")
        saldo += valor
        extrato += f"{timestamp} - {ICON_DEPOSIT} Dep√≥sito: R$ {valor:.2f}\n"
        print(f"{ICON_SUCCESS} Dep√≥sito de R$ {valor:.2f} realizado com sucesso!")
    else:
        print(f"{ICON_ERROR} Valor inv√°lido.")
    return saldo, extrato


def sacar(usuario, saldo, extrato, numero_saques, limite):
    try:
        valor = float(input(f"{ICON_WITHDRAW} Informe o valor do saque: R$ "))
    except ValueError:
        print(f"{ICON_ERROR} Valor inv√°lido.")
        return saldo, extrato, numero_saques

    # Autentica√ß√£o ap√≥s informar valor
    if not autenticar(usuario):
        print(f"{ICON_ERROR} Saque cancelado.")
        return saldo, extrato, numero_saques

    if valor > saldo:
        print(f"{ICON_ERROR} Saldo insuficiente.")
    elif valor > limite:
        print(f"‚ö†Ô∏è Limite por saque: R$ {limite:.2f}.")
    elif valor > 0:
        timestamp = datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")
        saldo -= valor
        extrato += f"{timestamp} - {ICON_WITHDRAW} Saque: R$ {valor:.2f}\n"
        numero_saques += 1
        print(f"{ICON_SUCCESS} Saque de R$ {valor:.2f} realizado com sucesso!")
    else:
        print(f"{ICON_ERROR} Valor inv√°lido.")
    return saldo, extrato, numero_saques


def pix(usuario, saldo, extrato):
    destino = input(f"{ICON_CPF} CPF destinat√°rio (11 d√≠gitos): ")
    if not destino.isdigit():
        print(f"{ICON_ERROR} CPF inv√°lido! Use apenas n√∫meros.")
        return saldo, extrato
    if len(destino) != 11:
        print(f"{ICON_ERROR} CPF deve conter 11 d√≠gitos.")
        return saldo, extrato
    if destino == usuario:
        print(f"{ICON_ERROR} N√£o √© poss√≠vel fazer PIX para o pr√≥prio CPF.")
        return saldo, extrato

    try:
        valor = float(input(f"{ICON_PIX} Informe o valor do PIX: R$ "))
    except ValueError:
        print(f"{ICON_ERROR} Valor inv√°lido.")
        return saldo, extrato

    # Autentica√ß√£o ap√≥s informar valor
    if not autenticar(usuario):
        print(f"{ICON_ERROR} PIX cancelado.")
        return saldo, extrato

    now = datetime.now(TZ)
    # N√£o permitir PIX > 500 ap√≥s 23:59
    if now.hour == 23 and now.minute >= 59 and valor > 500:
        print(f"{ICON_ERROR} PIX acima de R$ 500 n√£o permitido ap√≥s 23:59.")
        return saldo, extrato

    if valor > saldo:
        print(f"{ICON_ERROR} Saldo insuficiente.")
    elif valor <= 0:
        print(f"{ICON_ERROR} Valor inv√°lido.")
    else:
        timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
        saldo -= valor
        extrato += f"{timestamp} - {ICON_PIX} PIX para {destino}: R$ {valor:.2f}\n"
        print(f"{ICON_SUCCESS} PIX de R$ {valor:.2f} enviado para {destino} com sucesso!")
    return saldo, extrato


def mostrar_extrato(saldo, extrato):
    print(f"\n{ICON_MENU}‚îÄ‚îÄ EXTRATO ‚îÄ‚îÄ{ICON_MENU}")
    if not extrato:
        print(f"{ICON_INFO} Sem movimenta√ß√µes.")
    else:
        print(extrato, end="")
    print(f"\nüí≥ Saldo: R$ {saldo:.2f}\n")


def registrar():
    print(f"\nüîê‚îÄ‚îÄ Cadastro de Usu√°rio ‚îÄ‚îÄüîê")
    while True:
        cpf = input(f"{ICON_CPF} CPF (11 d√≠gitos, somente n√∫meros, ex: 12345678901): ")
        if not cpf.isdigit():
            print(f"{ICON_ERROR} CPF inv√°lido! Use apenas n√∫meros.")
        elif len(cpf) != 11:
            print(f"{ICON_ERROR} CPF deve conter exatamente 11 d√≠gitos.")
        elif cpf in users:
            print(f"{ICON_ERROR} CPF j√° cadastrado!")
        else:
            break

    while True:
        senha = input(f"{ICON_KEY} Crie senha (4 d√≠gitos): ")
        if not (senha.isdigit() and len(senha) == 4):
            print(f"{ICON_ERROR} Senha inv√°lida! Deve ter 4 d√≠gitos.")
        else:
            break

    users[cpf] = {
        "senha": senha,
        "saldo": 0.0,
        "extrato": "",
        "numero_saques": 0,
        "numero_transacoes_dia": 0,
        "data_contagem": date.today()
    }
    print(f"{ICON_SUCCESS} Usu√°rio cadastrado!")


def login_user():
    print(f"\nüîë‚îÄ‚îÄ Login de Usu√°rio ‚îÄ‚îÄüîë")
    cpf = input(f"{ICON_CPF} CPF: ")
    senha = input(f"{ICON_KEY} Senha: ")
    user = users.get(cpf)
    if user and user["senha"] == senha:
        print(f"{ICON_SUCCESS} Login bem-sucedido!\n")
        return cpf
    print(f"{ICON_ERROR} CPF ou senha inv√°lidos!\n")
    return None


def main():
    # Menu inicial
    while True:
        print(f"üè¶‚îÄ‚îÄ Bem-vindo ao Sistema Banc√°rio ‚îÄ‚îÄüè¶")
        print(f"üë• [c] Cadastro")
        print(f"üîë [l] Login")
        print(f"‚ùå [q] Sair")
        opc = input("üöÄ Escolha: ").lower()

        if opc == "c":
            registrar()
        elif opc == "l":
            usuario = login_user()
            if usuario:
                break
        elif opc == "q":
            print(f"üëã At√© breve!")
            return
        else:
            print(f"{ICON_ERROR} Op√ß√£o inv√°lida!\n")

    user_data = users[usuario]
    saldo = user_data["saldo"]
    extrato = user_data["extrato"]
    numero_saques = user_data["numero_saques"]
    numero_transacoes_dia = user_data["numero_transacoes_dia"]
    data_contagem = user_data["data_contagem"]
    limite = 500

    while True:
        hoje = date.today()
        if hoje != data_contagem:
            numero_transacoes_dia = 0
            data_contagem = hoje

        opcao = mostrar_menu_transacoes()

        if opcao == "d":
            if numero_transacoes_dia >= 10:
                print(f"üî• Limite di√°rio atingido!")
            else:
                extrato_pre = extrato
                saldo, extrato = depositar(usuario, saldo, extrato)
                if extrato != extrato_pre:
                    numero_transacoes_dia += 1

        elif opcao == "s":
            if numero_transacoes_dia >= 10:
                print(f"üî• Limite di√°rio atingido!")
            else:
                extrato_pre = extrato
                saldo, extrato, numero_saques = sacar(usuario, saldo, extrato, numero_saques, limite)
                if extrato != extrato_pre:
                    numero_transacoes_dia += 1

        elif opcao == "p":
            if numero_transacoes_dia >= 10:
                print(f"üî• Limite di√°rio atingido!")
            else:
                extrato_pre = extrato
                saldo, extrato = pix(usuario, saldo, extrato)
                if extrato != extrato_pre:
                    numero_transacoes_dia += 1

        elif opcao == "e":
            mostrar_extrato(saldo, extrato)

        elif opcao == "v":
            print(f"üëÄ Saldo: R$ {saldo:.2f}\n")

        elif opcao == "q":
            print(f"üôè Obrigado! At√© logo!")
            user_data.update({
                "saldo": saldo,
                "extrato": extrato,
                "numero_saques": numero_saques,
                "numero_transacoes_dia": numero_transacoes_dia,
                "data_contagem": data_contagem
            })
            break

        else:
            print(f"{ICON_ERROR} Opera√ß√£o inv√°lida!")

        user_data.update({
            "saldo": saldo,
            "extrato": extrato,
            "numero_saques": numero_saques,
            "numero_transacoes_dia": numero_transacoes_dia,
                "data_contagem": data_contagem
            })

if __name__ == "__main__":
    main()